from typing import TypedDict, NotRequired, Callable, Dict
import telebot
from telebot import types
from config import TELEGRAM_BOT_TOKEN
# from oauth2client.service_account import ServiceAccountCredentials

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

BACK = "üîô –ù–∞–∑–∞–¥"
MAIN_MENU = "main_menu"
# TO_CHAT_ID = ... –¥–æ–±–∞–≤–ª—è–µ–º id –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–µ
# SERVICE_ACCOUNT_FILE = 'path/to/your/credentials.json'
# SCOPE = ['https://spreadsheets.google.com/feeds',
#          'https://www.googleapis.com/auth/drive']
# SPREADSHEET_ID = 'id –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö
# def get_sheet():
#     creds = ServiceAccountCredentials.from_json_keyfile_name(
#         SERVICE_ACCOUNT_FILE, SCOPE)
#     client = gspread.authorize(creds)
#     sheet = client.open_by_key(SPREADSHEET_ID).sheet1
#     return sheet


# –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–∫–∞–∑–µ
def send_summary(user_id: int):
    session = get_session(user_id)
    data = session.data
    if not data:
        bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return
    text = "üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n"
    for key, value in data.items():
        text += f"‚Ä¢  {value}\n"
    bot.send_message(user_id, text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É
    #bot.forward_message(TO_CHAT_ID, message.chat.id, message.message_id)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É
    # sheet = get_sheet()
    # sheet.append_row([name, telegram_id])
    session.reset()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞. —Ç–µ–∫—Å, –ø–µ—Ä–µ—Ö–æ–¥—ã, –∫–Ω–æ–ø–∫–∏ –∏ —Ö—ç–Ω–¥–ª–µ—Ä
class State(TypedDict):
    text: str
    transitions: NotRequired[Dict[str, str]]
    next: NotRequired[str]
    buttons: NotRequired[list[str]]
    handler: NotRequired[Callable[[int], None]]
    input: NotRequired[bool]


EMPTY_STATE: State = {"text": "–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", "next": MAIN_MENU}


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
fsm: Dict[str, State] = {
    "main_menu": {
        "text": "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ–º. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "buttons": [
            "–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –æ–∫–æ–Ω",
            "–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –±–∞–ª–∫–æ–Ω–∞/–ª–æ–¥–∂–∏–∏",
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
            "üñº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
        ],
        "transitions": {
            "–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –æ–∫–æ–Ω": "glazing_place",
            "–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –±–∞–ª–∫–æ–Ω–∞/–ª–æ–¥–∂–∏–∏": "balcony_type",
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã": "contacts",
            "üñº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ": "portfolio",
        },
    },
    "glazing_place": {
        "text": "–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–∞?",
        "buttons": ["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–î–æ–º", "–û—Ñ–∏—Å", "–î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ"],
        "transitions": {
            "–ö–≤–∞—Ä—Ç–∏—Ä–∞": "glazing_item",
            "–î–æ–º": "glazing_item",
            "–û—Ñ–∏—Å": "glazing_item",
            "–î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ": "glazing_item",
        },
    },
    "glazing_item": {
        "text": "–ö–∞–∫–æ–π —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è?",
        "buttons": ["–ö–≤–∞—Ä—Ç–∏—Ä–Ω–æ–µ –æ–∫–Ω–æ", "–ë–∞–ª–∫–æ–Ω–Ω—ã–π –±–ª–æ–∫", "–í—Ö–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞"],
        "transitions": {
            "–ö–≤–∞—Ä—Ç–∏—Ä–Ω–æ–µ –æ–∫–Ω–æ": "glazing_profile",
            "–ë–∞–ª–∫–æ–Ω–Ω—ã–π –±–ª–æ–∫": "glazing_profile",
            "–í—Ö–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞": "glazing_profile",
        },
    },
    "glazing_profile": {
        "text": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:",
        "buttons": ["Rehau", "KBE", "Brusbox", "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"],
        "transitions": {
            "Rehau": "glazing_size",
            "KBE": "glazing_size",
            "Brusbox": "glazing_size",
            "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "glazing_size",
        },
    },
    "glazing_size": {
        "text": "–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑–¥–µ–ª–∏–π?",
        "buttons": ["–î–∞, –º–æ–≥—É", "–ù–µ—Ç, –Ω—É–∂–µ–Ω –∑–∞–º–µ—Ä—â–∏–∫"],
        "transitions": {"–î–∞, –º–æ–≥—É": "adress", "–ù–µ—Ç, –Ω—É–∂–µ–Ω –∑–∞–º–µ—Ä—â–∏–∫": "adress"},
    },
    "balcony_type": {
        "text": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Å—Ç–µ–∫–ª–µ–Ω–∏—è:",
        "buttons": ["–¢—ë–ø–ª–æ–µ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ", "–•–æ–ª–æ–¥–Ω–æ–µ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ", "Slidors"],
        "transitions": {
            "–¢—ë–ø–ª–æ–µ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ": "balcony_form",
            "–•–æ–ª–æ–¥–Ω–æ–µ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ": "balcony_form",
            "Slidors": "balcony_form",
        },
    },
    "balcony_form": {
        "text": "–ö–∞–∫–∞—è —É –≤–∞—Å —Ñ–æ—Ä–º–∞ –±–∞–ª–∫–æ–Ω–∞?",
        "buttons": ["–ü—Ä—è–º–∞—è –ª–æ–¥–∂–∏—è", "–õ–æ–¥–æ—á–∫–∞", "–°–∞–ø–æ–∂–µ–∫", "–ü-–æ–±—Ä–∞–∑–Ω—ã–π", "–î—Ä—É–≥–æ–µ"],
        "transitions": {
            "–ü—Ä—è–º–∞—è –ª–æ–¥–∂–∏—è": "balcony_sheathing",
            "–õ–æ–¥–æ—á–∫–∞": "balcony_sheathing",
            "–°–∞–ø–æ–∂–µ–∫": "balcony_sheathing",
            "–ü-–æ–±—Ä–∞–∑–Ω—ã–π": "balcony_sheathing",
            "–î—Ä—É–≥–æ–µ": "balcony_sheathing",
        },
    },
    "balcony_sheathing": {
        "text": "–ù—É–∂–Ω–∞ –ª–∏ –æ–±—à–∏–≤–∫–∞?",
        "buttons": ["–î–∞", "–ù–µ—Ç", "–î—Ä—É–≥–æ–µ"],
        "transitions": {
            "–î–∞": "balcony_insulation",
            "–ù–µ—Ç": "balcony_insulation",
            "–î—Ä—É–≥–æ–µ": "balcony_insulation",
        },
    },
    "balcony_insulation": {
        "text": "–£—Ç–µ–ø–ª–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è?",
        "buttons": ["–î–∞", "–ù–µ—Ç", "–î—Ä—É–≥–æ–µ"],
        "transitions": {
            "–î–∞": "balcony_size",
            "–ù–µ—Ç": "balcony_size",
            "–î—Ä—É–≥–æ–µ": "balcony_size",
        },
    },
    "balcony_size": {
        "text": "–£–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã?",
        "buttons": ["–î–∞, –º–æ–≥—É", "–ù–µ—Ç, –Ω—É–∂–µ–Ω –∑–∞–º–µ—Ä—â–∏–∫"],
        "transitions": {
            "–î–∞, –º–æ–≥—É": "adress",
            "–ù–µ—Ç, –Ω—É–∂–µ–Ω –∑–∞–º–µ—Ä—â–∏–∫": "adress",
        },
    },
    "contacts": {
        "text": (
            "üìç –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, –¥. 10\n"
            "üì± +7 (900) 000-00-00\n"
            "‚úâ info@okna.ru\n"
            "üì≤ [WhatsApp](https://wa.me/79000000000)\n"
            "üì≤ [Telegram](https://t.me/okna_manager)"
        ),
    },
    "portfolio": {
        "text": "üñº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: [–ø—Ä–∏–º–µ—Ä](https://github.com/Alexfox36/telegramm_okna.git)",
    },
    "adress": {
        "text": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω:",
        "next": "phone",
        "input": True,
    },
    "phone": {
        "text": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "next": "name",
        "input": True,
    },
    "name": {
        "text": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "next": "summary",
        "input": True,
    },
    "summary": {
        "text": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í–æ—Ç –≤–∞—à–∞ –∑–∞—è–≤–∫–∞:",
        "handler": send_summary,
    },
}


# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏–∏, –∞ —Ç–∞–∫ –∂–µ –æ —à–∞–≥–∞—Ö –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥
class UserSession:
    def __init__(self):
        self.state_stack = [MAIN_MENU]
        self.data = {}

    def push_state(self, state: str):
        self.state_stack.append(state)

    def pop_state(self):
        if len(self.state_stack) > 1:
            removed_state = self.state_stack.pop()
            if removed_state in self.data:
                del self.data[removed_state]

    def current_state(self) -> str:
        return self.state_stack[-1]

    def reset(self):
        self.state_stack = [MAIN_MENU]
        self.data = {}


sessions: Dict[int, UserSession] = {}


# –ü–æ–ª—É—á–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def get_session(user_id: int) -> UserSession:
    return sessions.setdefault(user_id, UserSession())

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_state(user_id: int):
    session = get_session(user_id)
    state_name = session.current_state()
    state = fsm.get(state_name, EMPTY_STATE)

    buttons = state.get("buttons", [])
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for btn in buttons:
        markup.add(types.KeyboardButton(btn))
    if state_name != MAIN_MENU:
        markup.add(types.KeyboardButton(BACK))

    bot.send_message(
        user_id, state.get("text", "..."), reply_markup=markup, parse_mode="Markdown"
    )

    handler = state.get("handler")
    if callable(handler):
        handler(user_id)


def is_text_input(message):
    session = get_session(message.chat.id)
    state = fsm.get(session.current_state(), EMPTY_STATE)
    return state.get("input") is True


def is_menu_choice(message):
    text = message.text
    if not text:
        return False
    if text.startswith("/"):
        return False
    if is_text_input(message):
        return False
    if text == BACK:
        return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π. –°—Ç–∞—Ä—Ç, –Ω–∞–∑–∞–¥, –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤—ã–±–æ—Ä –ø—Ä–µ–¥–∏–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è,—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
@bot.message_handler(commands=["start"])
def handle_start(message):
    session = get_session(message.from_user.id)
    session.reset()
    send_state(message.from_user.id)


@bot.message_handler(func=lambda message: message.text == BACK)
def handle_back(message):
    session = get_session(message.chat.id)
    session.pop_state()
    send_state(message.chat.id)


@bot.message_handler(func=is_menu_choice)
def handle_menu_choice(message):
    session = get_session(message.chat.id)
    text = message.text.strip()
    state_name = session.current_state()
    state = fsm.get(state_name, EMPTY_STATE)

    next_state = state.get("transitions", {}).get(text)
    if next_state:
        session.data[state_name] = text
        session.push_state(next_state)
        send_state(message.chat.id)
    else:
        bot.send_message(
            message.chat.id, "–ù–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )


@bot.message_handler(func=is_text_input)
def handle_text_states(message):
    session = get_session(message.chat.id)
    state_name = session.current_state()
    state = fsm.get(state_name, EMPTY_STATE)
    session.data[state_name] = message.text.strip()
    next_state = state.get("next", MAIN_MENU)
    session.push_state(next_state)
    send_state(message.chat.id)


if __name__ == "__main__":
    bot.polling(none_stop=True)
